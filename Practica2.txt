--------------Taller 2.  Movimiento de la IA en un tablero-------------

-Los enemigos se mueven y te persiguen

-Muchos juegos 3D tienen por debajo un tablero 2D de casillas


---------PROBLEMA--------

-Usamos enfoque Resolutor

-El marco de trabajo es un problema de búsqueda de la casilla objetivo
	*Hay que definir la estructura del tablero y la infraestructura en función del problema

-Buscar una buena heurística y resolverlo mediante estrategia informada : A*

-MEJORA: Probar otras heurísticas o variantes de A*. Para ver los límites de tiempo o de memoria.

-Para mantener un buen framerate: El algoritmo se actualiza cada x tiempo o casillas


--------EJEMPLOS-------

-Pueden existir diferentes tableros: cuadrados o hexagonales según el juego, no influye la vista del juego(3D, isométrico, 2D)

-Existen diferentes formas de la manera en que se realiza la ruta: Por ejemplo pac-man


--------PRÁCTICA---------

Control de unidades RTS

ENUNCIADO
---------

-Programar prototipo de IA que planifique la ruta de 3 unidades diferentes que el jugador puede mover librebremente en un tablero 10x10

-Las unidades no pueden compartir casilla y colisionan.
-Solo 1 unidades seleccionada. Se ilumina

-Casillas:
	*Casilla normal de tierra. Moverse cuesta 1
	*Casilla embarrada. Moverse cuesta 2 -> La unidad entra a la mitad de velocidad
	*Casilla bloqueada (MURO)

-Unidades:
	*Roja.
	*Verde.
	*Azul

-Flechas.
	-Una para cada unidad
	-Pueden compartir casilla 
	-Marcan la casilla objetivo de la unidad de color correspondiente


Input:
	-Si haces click sin una unidad seleccionada en el terreno, se sigue este ciclo:
		Normal -> Embarrada -> Bloqueada

	-Si haces click en una unidad para a ser seleccionada. Con la unidad seleccionada puedes hacer click en terreno:
		-Casilla normal o embarrada:
			*A la casilla se le añade la flecha correspondiente. 
			*La unidad tiene un objetivo asignado y se planifica su ruta y se pone a perseguirla.
			*La unidad deja de estar seleccionada
			*Cuando alcanza la casilla objetivo o se encuentra un bloqueo inesperado -> Para y deja de tener un objetivo asignado

		-Casilla bloqueada: Se deselecciona la unidad
		-Click en una unidad: No hace nada.



	
RESTRICCIONES ESPECIALES
------------------------

-Crear un único resolutor: Recibe problemas (rutas a planificar) y devuelve soluciones (secuencia de pasos):
	-Al planificar la ruta solo se considera el tablero: Se ignoran las unidades
	-Usar A* o alguna variante con buena heurística

-Separar el update re Unity de la IA que programemos:
	-Que el rendimiento sea bueno

PISTAS Y CONSEJOS
-----------------

-Para la IA debemos usar corrutinas o otro hilo:

CORRUTINAS
----------

//esto es lo que haríamos siempre
void EjecutaIA() {
	 for (...) {
		 ...
		 // Hará todos los pasos
		 en un mismo Update
	 }
}

//Pero utilizaremos corrutinas así
IEnumerator EjecutaIA() {
	 for (...) {
		 …
		 yield return null;
		 // Sólo dará un paso
		 en cada Update
	 }
}

-Se llama con StartCoroutine("EjecutaIA");
-Podemos esperar entre paso y paso: yield return new WaitForSeconds(.1f);


EJECUCIÓN MULTIHILO  - MUY CHUNGO CORRUTINAS Y ME COMES LA POLLA ALA PUTAQ
-------------------

-Incluir using System.Threading

-En el evento Start de gameobject ponemos en marcha un nuevo hilo:
	hilo = new Thread(Run); hilo.Start();

-Run() es el método donde va el resolutor



REFERENCIAS
-----------

Pathfinding en HTML5
-http://buildnewgames.com/astar/


MEJORAS
-------

-Dibujar la ruta planificada con una línea de color
-Recalcular cada vez que hay bloqueo
-Permitir que se siga a otra unidad (Pegar una flecha de objetivo encima)



HTML
------

Tenemos una función findPath()

// world is a 2d array of integers (eg world[10][15] = 0)
// pathStart and pathEnd are arrays like [5,10]
function findPath(world, pathStart, pathEnd)
{
  // shortcuts for speed
	var	abs = Math.abs;
	var	max = Math.max;
	var	pow = Math.pow;
	var	sqrt = Math.sqrt;

	// the world data are integers:
	// anything higher than this number is considered blocked
	// this is handy is you use numbered sprites, more than one
	// of which is walkable road, grass, mud, etc
	var maxWalkableTileNum = 0;

	// keep track of the world dimensions
	// Note that this A-star implementation expects the world array to be square: 
	// it must have equal height and width. If your game world is rectangular, 
	// just fill the array with dummy values to pad the empty space.
	var worldWidth = world[0].length;
	var worldHeight = world.length;
	var worldSize =	worldWidth * worldHeight;

	// which heuristic should we use?
	// default: no diagonals (Manhattan)
	var distanceFunction = ManhattanDistance;
	var findNeighbours = function(){}; // empty

	/*
	// alternate heuristics, depending on your game:
	// diagonals allowed but no sqeezing through cracks:
	var distanceFunction = DiagonalDistance;
	var findNeighbours = DiagonalNeighbours;
	// diagonals and squeezing through cracks allowed:
	var distanceFunction = DiagonalDistance;
	var findNeighbours = DiagonalNeighboursFree;
	// euclidean but no squeezing through cracks:
	var distanceFunction = EuclideanDistance;
	var findNeighbours = DiagonalNeighbours;
	// euclidean and squeezing through cracks allowed:
	var distanceFunction = EuclideanDistance;
	var findNeighbours = DiagonalNeighboursFree;
	*/

	  // actually calculate the a-star path!
	// this returns an array of coordinates
	// that is empty if no path is possible
	return calculatePath();

} // end of findPath() function

Tenemos la matriz de representación de mundo
Tenemos las posiciones inicio y fin

Se define la máxima distancia del mundo.
En este ejemplo solo hay un tipo de tile.

Se definen referencias a funciones heurísticas que utilizaremos para el algoritmo. La que utilicemos depende de si queremos que pueda andar en diagonal o no.

Que heurística usar para calcular distancias?
---------------------------------------------

En el ejemplo se utiliza manhattan.
Si fuese en diagonal utilizariamos Euclidian

// distanceFunction functions
	// these return how far away a point is to another

	function ManhattanDistance(Point, Goal)
	{	// linear movement - no diagonals - just cardinal directions (NSEW)
		return abs(Point.x - Goal.x) + abs(Point.y - Goal.y);
	}

	SI QUISIEMOS HACERLO EN DIAGONAL, VOLVEMOS A MIRAR LA PAGINA

Determinar las casillas adyacentes
----------------------------------

Q
  // Neighbours functions, used by findNeighbours function
	// to locate adjacent available cells that aren't blocked

	// Returns every available North, South, East or West
	// cell that is empty. No diagonals,
	// unless distanceFunction function is not Manhattan
	function Neighbours(x, y)
	{
		var	N = y - 1,
		S = y + 1,
		E = x + 1,
		W = x - 1,
		myN = N > -1 && canWalkHere(x, N),
		myS = S < worldHeight && canWalkHere(x, S),
		myE = E < worldWidth && canWalkHere(E, y),
		myW = W > -1 && canWalkHere(W, y),
		result = [];
		if(myN)
		result.push({x:x, y:N});
		if(myE)
		result.push({x:E, y:y});
		if(myS)
		result.push({x:x, y:S});
		if(myW)
		result.push({x:W, y:y});
		findNeighbours(myN, myS, myE, myW, N, S, E, W, result);
		return result;
	}

	  // returns boolean value (world cell is available and open)
	function canWalkHere(x, y)
	{
		return ((world[x] != null) &&
			(world[x][y] != null) &&
			(world[x][y] <= maxWalkableTileNum));
	};


Guardar costes del camino durante el procesado
----------------------------------------------

Creamos objetos temporales que se usan para guardar costes y array de camino durante el procesado

Este algoritmo crea listas de aquellos nodos que se requieran, y los llenará con coste qu se añaden atravesando todas las rutas que comprobamos durante el camino.


  // Node function, returns a new object with Node properties
	// Used in the calculatePath function to store route costs, etc.
	function Node(Parent, Point)
	{
		var newNode = {
			// pointer to another Node object
			Parent:Parent,
			// array index of this Node in the world linear array
			value:Point.x + (Point.y * worldWidth),
			// the location coordinates of this Node
			x:Point.x,
			y:Point.y,
			// the distanceFunction cost to get
			// TO this Node from the START
			f:0,
			// the distanceFunction cost to get
			// from this Node to the GOAL
			g:0
		};

		return newNode;
	}

	El nodo debe de tener el coste desde la raiz al nodo y desde el nodo hasta el punto final.
	El nodo tiene posiciones x e y.
	El nodo tiene un array index que dice que posición del tablero ocupa


A*
--

	// Path function, executes AStar algorithm operations
	function calculatePath()
	{
		// create Nodes from the Start and End x,y coordinates
		var	mypathStart = Node(null, {x:pathStart[0], y:pathStart[1]});
		var mypathEnd = Node(null, {x:pathEnd[0], y:pathEnd[1]});
		// create an array that will contain all world cells
		var AStar = new Array(worldSize);
		// list of currently open Nodes
		var Open = [mypathStart];
		// list of closed Nodes
		var Closed = [];
		// list of the final output array
		var result = [];
		// reference to a Node (that is nearby)
		var myNeighbours;
		// reference to a Node (that we are considering now)
		var myNode;
		// reference to a Node (that starts a path in question)
		var myPath;
		// temp integer variables used in the calculations
		var length, max, min, i, j;
		// iterate through the open list until none are left
		while(length = Open.length)
		{
			max = worldSize;
			min = -1;
			for(i = 0; i < length; i++)
			{
				if(Open[i].f < max)
				{
					max = Open[i].f;
					min = i;
				}
			}
			// grab the next node and remove it from Open array
			//En la posición min, cogemos el nodo y lo borramos de la lista
			myNode = Open.splice(min, 1)[0];
			// is it the destination node?
			if(myNode.value === mypathEnd.value)
			{
				myPath = Closed[Closed.push(myNode) - 1];
				do
				{
					result.push([myPath.x, myPath.y]);
				}
				while (myPath = myPath.Parent);
				// clear the working arrays
				AStar = Closed = Open = [];
				// we want to return start to finish
				result.reverse();
			}
			else // not the destination
			{
				// find which nearby nodes are walkable
				myNeighbours = Neighbours(myNode.x, myNode.y);
				// test each one that hasn't been tried already
				for(i = 0, j = myNeighbours.length; i < j; i++)
				{
					myPath = Node(myNode, myNeighbours[i]);
					if (!AStar[myPath.value])
					{
						// estimated cost of this particular route so far
						myPath.g = myNode.g + distanceFunction(myNeighbours[i], myNode);
						// estimated cost of entire guessed route to the destination
						myPath.f = myPath.g + distanceFunction(myNeighbours[i], mypathEnd);
						// remember this new path for testing above
						Open.push(myPath);
						// mark this node in the world graph as visited
						AStar[myPath.value] = true;
					}
				}
				// remember this route as having no more untested options
				Closed.push(myNode);
			}
		} // keep iterating until until the Open list is empty
		return result;
	}

	Llenamos un par de listas enlazadas de Nodos que contienen el valor en el mundo y las distancias a lo largo del camno.

	Esta implementación de A* está hecha para un mapa cuadrado, debe tener el mismo ancho que alto.

	-Tal y como se describe arriba, primero tratamos de buscar rutas que "parezcan" las más óptimas para llegar al objetivo.
	-Vamos añadiendo nodos en cada array dependiendo del coste(distancia) para llegar ahí.
	-Cuando la lista abierta está vacía, sabemos que el camino con el menor coste está en el array resultado, listo para la salida final.

	Empezamos desde un nodo inicial, que es el que pasamos a la función findpath() y usamos una lista o cola de nodos que necesitan ser consideradas.

	Esta es la matriz abierta. La lista cerrada(que contiene nodos que ya hemos comprobado) es usada para ser más eficiente.

A lo largo del camino, tenemos en cuenta la distancia ya recorrida:
	-Nodo.g es el coste desde inicio al nodo
	-Nodo.f es Nodo.g + el coste desde el nodo al destino

Cuanto menor es la F, mayor es la prioridad. A cada paso, el nodo con menor v se borra de la cola, los valores f y g de los vecinos son actualizados y estos vecinos son añadidos a la lista, listos para ser recorridos.

Continuamos hasta que un nodo resultados tenga el menos valor de f que otro nodo en la cola o hasta que la cola este vacía.

