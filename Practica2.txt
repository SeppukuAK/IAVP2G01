--------------Taller 2.  Movimiento de la IA en un tablero-------------

-Los enemigos se mueven y te persiguen

-Muchos juegos 3D tienen por debajo un tablero 2D de casillas


---------PROBLEMA--------

-Usamos enfoque Resolutor

-El marco de trabajo es un problema de búsqueda de la casilla objetivo
	*Hay que definir la estructura del tablero y la infraestructura en función del problema

-Buscar una buena heurística y resolverlo mediante estrategia informada : A*

-MEJORA: Probar otras heurísticas o variantes de A*. Para ver los límites de tiempo o de memoria.

-Para mantener un buen framerate: El algoritmo se actualiza cada x tiempo o casillas


--------EJEMPLOS-------

-Pueden existir diferentes tableros: cuadrados o hexagonales según el juego, no influye la vista del juego(3D, isométrico, 2D)

-Existen diferentes formas de la manera en que se realiza la ruta: Por ejemplo pac-man


--------PRÁCTICA---------

Control de unidades RTS

ENUNCIADO
---------

-Programar prototipo de IA que planifique la ruta de 3 unidades diferentes que el jugador puede mover librebremente en un tablero 10x10

-Las unidades no pueden compartir casilla y colisionan.
-Solo 1 unidades seleccionada. Se ilumina

-Casillas:
	*Casilla normal de tierra. Moverse cuesta 1
	*Casilla embarrada. Moverse cuesta 2 -> La unidad entra a la mitad de velocidad
	*Casilla bloqueada (MURO)

-Unidades:
	*Roja.
	*Verde.
	*Azul

-Flechas.
	-Una para cada unidad
	-Pueden compartir casilla 
	-Marcan la casilla objetivo de la unidad de color correspondiente


Input:
	-Si haces click sin una unidad seleccionada en el terreno, se sigue este ciclo:
		Normal -> Embarrada -> Bloqueada

	-Si haces click en una unidad para a ser seleccionada. Con la unidad seleccionada puedes hacer click en terreno:
		-Casilla normal o embarrada:
			*A la casilla se le añade la flecha correspondiente. 
			*La unidad tiene un objetivo asignado y se planifica su ruta y se pone a perseguirla.
			*La unidad deja de estar seleccionada
			*Cuando alcanza la casilla objetivo o se encuentra un bloqueo inesperado -> Para y deja de tener un objetivo asignado

		-Casilla bloqueada: Se deselecciona la unidad
		-Click en una unidad: No hace nada.



	
RESTRICCIONES ESPECIALES
------------------------

-Crear un único resolutor: Recibe problemas (rutas a planificar) y devuelve soluciones (secuencia de pasos):
	-Al planificar la ruta solo se considera el tablero: Se ignoran las unidades
	-Usar A* o alguna variante con buena heurística

-Separar el update re Unity de la IA que programemos:
	-Que el rendimiento sea bueno

PISTAS Y CONSEJOS
-----------------

-Para la IA debemos usar corrutinas o otro hilo:

CORRUTINAS
----------

//esto es lo que haríamos siempre
void EjecutaIA() {
	 for (...) {
		 ...
		 // Hará todos los pasos
		 en un mismo Update
	 }
}

//Pero utilizaremos corrutinas así
IEnumerator EjecutaIA() {
	 for (...) {
		 …
		 yield return null;
		 // Sólo dará un paso
		 en cada Update
	 }
}

-Se llama con StartCoroutine("EjecutaIA");
-Podemos esperar entre paso y paso: yield return new WaitForSeconds(.1f);


EJECUCIÓN MULTIHILO  - MUY CHUNGO CORRUTINAS Y ME COMES LA POLLA ALA PUTAQ
-------------------

-Incluir using System.Threading

-En el evento Start de gameobject ponemos en marcha un nuevo hilo:
	hilo = new Thread(Run); hilo.Start();

-Run() es el método donde va el resolutor



REFERENCIAS
-----------

Pathfinding en HTML5
-http://buildnewgames.com/astar/


MEJORAS
-------

-Dibujar la ruta planificada con una línea de color
-Recalcular cada vez que hay bloqueo
-Permitir que se siga a otra unidad (Pegar una flecha de objetivo encima)

